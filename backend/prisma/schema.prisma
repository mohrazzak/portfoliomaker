generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "nestjs-zod-prisma"
  output   = "../src/generated/zod"

  relationModel = false // (default) Create and export both plain and related models.
  // relationModel         = "default" // Do not export model without relations.
  // relationModel         = false // Do not generate related model

  generateDto = false // (default) Generate DTOs for NestJS

  modelCase = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
  // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

  modelSuffix = "Schema" // (default) Suffix to apply to your prisma models when naming Zod schemas

  dtoCase = "PascalCase" // (default) Output DTOs using pascal case (ex. UserDto, PostDto)
  // dtoCase             = "camelCase" // Output DTOs using camel case (ex. userDto, postDto)

  dtoSuffix = "Entity" // (default) Suffix to apply to your prisma models when naming DTOs

  // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
  useDecimalJs = false // represent the prisma Decimal type using Decimal.js (as Prisma does)

  imports = "../src/generated/zod/schemas"

  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(uuid()) /// @z.string().uuid()
  fullName String? /// @z.string().min(3).max(20).nullable().default("Full Name")

  role     Role   @default(USER)
  password String /// @z.any().and(imports.passwordSchema)
  email    String @unique /// @z.any().and(imports.emailSchema)

  isActive Boolean @default(false) /// @z.boolean().default(false)
  isBanned Boolean @default(false) /// @z.boolean().default(false)

  lastLogin DateTime? /// @z.date().nullable().default(new Date())
  createdAt DateTime  @default(now()) /// @z.date().default(new Date())
  updatedAt DateTime  @default(now()) @updatedAt /// @z.date().default(new Date())
  deletedAt DateTime? /// @z.date().nullable().default(new Date()) // TODO implement the soft delete

  @@index([email])
}

model Token {
  id Int @id @default(autoincrement())

  token String @unique /// @z.string().default('eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c')

  purpose TokenPurpose

  @@index([token])
}

enum Role {
  USER
  ADMIN
}

enum TokenPurpose {
  SIGNUP
  PASSWORD_RESET
  EMAIL_RESET
}
